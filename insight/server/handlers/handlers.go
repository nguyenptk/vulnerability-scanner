package server

import (
	"encoding/json"
	"net/http"

	"github.com/nguyenptk/vulnerability-scanner/insight/common/log"
	"github.com/nguyenptk/vulnerability-scanner/insight/storages/mysql"
)

// Insight holds the singleton object for handlers
type Insight struct {
	MySQL  *mysql.Database
	Logger *log.Logger
}

// Insight holds the singleton object for handlers
type Metadata struct {
	Offset *int `json:"offset,omitempty"`
	Limit  *int `json:"limit,omitempty"`
	Count  *int `json:"count,omitempty"`
}

// Write response body to client
func (f *Insight) writeRespBody(w http.ResponseWriter, v interface{}) {
	resp := make(map[string]interface{})
	resp["message"] = v
	result, err := json.Marshal(resp)
	if err != nil {
		f.Logger.Error("[%s] Error happened in JSON marshal. Err: %s", err)
	}
	w.Write(result)
}

// Write response body to client with metadata
func (f *Insight) writeRespBodyMetadata(w http.ResponseWriter, message, metadata interface{}) {
	resp := make(map[string]interface{})
	resp["metadata"] = metadata
	resp["message"] = message
	result, err := json.Marshal(resp)
	if err != nil {
		f.Logger.Error("[%s] Error happened in JSON marshal. Err: %s", err)
	}
	w.Write(result)
}
