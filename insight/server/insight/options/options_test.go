package options

import (
	"net/http"
	"reflect"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestOptions_ParseHeaders(t *testing.T) {
	cases := []struct {
		in    map[string]string
		want  *Options
		error string
	}{
		// Test case 1: parse headers successfully
		{
			map[string]string{
				"id":           "123",
				"offset":       "0",
				"limit":        "10",
				"x-request-id": "abc-def",
			},
			&Options{
				ID:         "123",
				Offset:     0,
				Limit:      10,
				XRequestID: "abc-def",
			},
			"",
		},
		// Test case 2: parse headers failed
		{
			map[string]string{
				"id":           "123",
				"offset":       "a", // init offset by character
				"limit":        "10",
				"x-request-id": "abc-def",
			},
			nil,
			"strconv.Atoi: parsing \"a\": invalid syntax",
		},
	}
	for _, c := range cases {
		header := &http.Header{}
		for k, v := range c.in {
			header.Add(k, v)
		}
		got, err := ParseHeaders(header)
		// Parse without error
		if err == nil {
			if !reflect.DeepEqual(got, c.want) {
				t.Errorf("ParseHeaders(%q) == %q, want %q", c.in, got, c.want)
			}
			// Parse with error
		} else {
			reflect.DeepEqual(got, c.want)
			assert.Equal(t, c.error, err.Error())
		}
	}
}
