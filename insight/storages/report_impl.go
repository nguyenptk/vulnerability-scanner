package storages

import (
	"time"

	"github.com/nguyenptk/vulnerability-scanner/insight/storages/mysql"
)

// ReportStorage
type ReportStorage struct {
	Report *Report
}

// Report holds the info for Reports table
type Report struct {
	ID              string           `json:"id,omitempty"`
	QueueAt         time.Time        `json:"queue_at,omitempty"`
	StartedAt       time.Time        `json:"started_at,omitempty"`
	FinishedAt      time.Time        `json:"finished_at,omitempty"`
	Status          string           `json:"status,omitempty"`
	Progress        *float32         `json:"progress,omitempty"` //* help add the field with value=0 to the json
	Targets         *int             `json:"targets,omitempty"`
	Repositories    *int             `json:"repositories,omitempty"`
	Findings        *int             `json:"findings,omitempty"`
	CreatedAt       time.Time        `json:"created_at,omitempty"`
	UpdatedAt       time.Time        `json:"updated_at,omitempty"`
	Vulnerabilities []*Vulnerability `json:"vulnerabilities,omitempty"`
}

// Vulnerability holds the info for Vulnerabilities table
type Vulnerability struct {
	ID             string     `json:"id,omitempty"`
	ReportID       string     `json:"report_id,omitempty"`
	RepositoryName string     `json:"repository_name,omitempty"`
	RepositoryUrl  string     `json:"repository_url,omitempty"`
	CreatedAt      time.Time  `json:"created_at,omitempty"`
	UpdatedAt      time.Time  `json:"updated_at,omitempty"`
	Findings       []*Finding `json:"findings,omitempty"`
}

// Finding holds the info for Findings table
type Finding struct {
	ID              string    `json:"id,omitempty"`
	VulnerabilityID string    `json:"vulnerability_id,omitempty"`
	FilePath        string    `json:"file_path,omitempty"`
	Action          string    `json:"action,omitempty"`
	Description     string    `json:"description,omitempty"`
	Comment         string    `json:"comment,omitempty"`
	FileURL         string    `json:"file_url,omitempty"`
	Line            *uint64   `json:"line,omitempty"`
	CreatedAt       time.Time `json:"created_at,omitempty"`
	UpdatedAt       time.Time `json:"updated_at,omitempty"`
}

// Get List of Reports from Reports table
func (f *ReportStorage) GetLists(db *mysql.Database, queryCondition QueryCondition) []*Report {
	// Retrieving reports with offset and limit
	var reports []*Report
	db.DB.Offset(queryCondition.Offset).Limit(queryCondition.Limit).Find(&reports)
	return reports
}

// Get Report by ID from Reports table
func (f *ReportStorage) GetByID(db *mysql.Database, queryCondition QueryCondition) *Report {
	// Retrieving report with primary key
	var report Report
	db.DB.Find(&report, "id = ?", queryCondition.ID)

	// Retrieving vulnerabilities with report_id from vulnerabilities tables
	var vulnerabilities []*Vulnerability
	db.DB.Find(&vulnerabilities, "report_id = ?", queryCondition.ID)

	if vulnerabilities != nil {
		// Then add findings if exist for each vulnerability
		// Retrieving findings with vulnerability_id from findings tables
		for _, v := range vulnerabilities {
			var findings []*Finding
			db.DB.Find(&findings, "vulnerability_id = ?", v.ID)
			if findings != nil {
				// Add findings to vulnerability
				v.Findings = findings
			}
		}
		// Add vulnerabilities to report
		report.Vulnerabilities = vulnerabilities
	}

	return &report
}
