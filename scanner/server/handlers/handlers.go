package server

import (
	"errors"
	"fmt"
	"net/http"
	"os"
	"strings"
	"time"

	scanner "github.com/nguyenptk/vulnerability-scanner/scanner/server"
	"github.com/nguyenptk/vulnerability-scanner/scanner/server/scanner/gitprovider"
	"github.com/nguyenptk/vulnerability-scanner/scanner/server/scanner/options"
	"github.com/nguyenptk/vulnerability-scanner/scanner/server/scanner/session"
)

func Scan(w http.ResponseWriter, req *http.Request) {
	// Parse headers to Options
	opt, err := options.Parse(req)
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
	var gitProvider gitprovider.GitProvider

	// Set Git provider
	gitProvider = &gitprovider.GithubProvider{}
	if *opt.Token == "" {
		*opt.Token = os.Getenv(gitprovider.GithubParamToken)
	}

	// Initialize Git provider
	err = gitProvider.Initialize(*opt.Token)
	if err != nil {
		fmt.Println(errors.New(fmt.Sprintf("unable to initialise %s provider", gitprovider.GithubName)))
		os.Exit(1)
	}

	// Initialize new scan session
	sess := &session.Session{}
	sess.Initialize(opt)
	sess.Out.Important("%s Scanning Started at %s\n", strings.Title(gitprovider.GithubName), sess.Stats.StartedAt.Format(time.RFC3339))
	sess.Out.Important("Loaded %d signatures\n", len(sess.Signatures))

	// Scan
	scanner.Scan(sess, gitProvider)
	sess.Out.Important("Gitlab Scanning Finished at %s\n", sess.Stats.FinishedAt.Format(time.RFC3339))

	sess.Stats.PrintStats(sess.Out)
}
