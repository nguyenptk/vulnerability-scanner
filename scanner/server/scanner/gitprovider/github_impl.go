package gitprovider

import (
	"context"
	"errors"
	"net/http"

	"golang.org/x/oauth2"

	"github.com/google/go-github/github"

	"strconv"
)

// GithubProvider holds Github client fields
type GithubProvider struct {
	Client *github.Client
	Token  string
}

// Initialize creates and assigns new client
func (g *GithubProvider) Initialize(token string) error {
	var client *http.Client

	if token != "" {
		g.Token = token
		ts := oauth2.StaticTokenSource(
			&oauth2.Token{AccessToken: token},
		)
		client = oauth2.NewClient(context.Background(), ts)
	}

	g.Client = github.NewClient(client)

	return nil
}

// GetRepository gets repo info
func (g *GithubProvider) GetRepository(opt map[string]string) (*Repository, error) {
	owner, exists := opt["owner"]
	if !exists {
		return nil, errors.New("owner option must exist in map")
	}

	repo, exists := opt["repo"]
	if !exists {
		return nil, errors.New("repo option must exist in map")
	}

	r, _, err := g.Client.Repositories.Get(context.Background(), owner, repo)
	if err != nil {
		return nil, err
	}

	return &Repository{
		ID:            strconv.Itoa(int(r.GetID())),
		Name:          r.GetName(),
		FullName:      r.GetFullName(),
		CloneURL:      r.GetCloneURL(),
		URL:           r.GetURL(),
		DefaultBranch: r.GetDefaultBranch(),
		Description:   r.GetDescription(),
		Homepage:      r.GetHomepage(),
		Owner:         r.GetOwner().GetName(),
	}, nil
}

// Name returns the provider name
func (g *GithubProvider) Name() string {
	return GithubName
}
