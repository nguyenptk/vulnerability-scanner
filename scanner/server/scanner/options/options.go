package options

import (
	"net/http"
	"strings"

	"github.com/google/uuid"
)

// Options ...
type Options struct {
	Repos   *string
	Target  *string
	Token   *string
	Threads int

	// There are 2 modes:
	// 	+ Trusted in the gateway
	//  + Generate itself
	// Report will hold this XRequestID for ID primary key
	XRequestID string
}

// ParseScanTargets splits string of targets by comma
func (o Options) ParseScanTargets() []string {
	targets := strings.Split(*o.Target, ",")
	for i, t := range targets {
		targets[i] = strings.Trim(t, " ")
	}
	return targets
}

// Parse headers of request
func ParseHeaders(req *http.Request) (Options, error) {
	repos := req.Header.Get("repos")
	target := req.Header.Get("target")
	token := req.Header.Get("token")

	var xRequestID string
	// Get from Gateway's header
	if req.Header.Get("x-request-id") != "" {
		// Genenerated itself
		xRequestID = req.Header.Get("x-request-id")
	} else {
		random, _ := uuid.NewRandom()
		xRequestID = random.String()
	}

	options := Options{
		Repos:      &repos,
		Target:     &target,
		Token:      &token,
		Threads:    0,
		XRequestID: xRequestID,
	}

	return options, nil
}
