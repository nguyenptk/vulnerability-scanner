package session

import (
	"flag"
	"sync"
	"testing"
	"time"

	"github.com/nguyenptk/vulnerability-scanner/scanner/server/scanner/findings"
	"github.com/nguyenptk/vulnerability-scanner/scanner/server/scanner/gitprovider"
	"github.com/nguyenptk/vulnerability-scanner/scanner/server/scanner/options"
)

var defaultOptions = options.Options{
	Token:  flag.String("token", "", "Specify Git provider token"),
	Target: flag.String("target", "", "Sub-directory within the repository to scan"),
	Repos:  flag.String("repo-list", "", "CSV file containing the list of whitelisted repositories to scan"),
}

func TestSession_Initialize(t *testing.T) {
	sess := createNewSession()
	sess.Initialize(defaultOptions)
	if sess.Out == nil {
		t.Errorf("Want Logger, got nil")
	}
	if sess.Stats == nil {
		t.Errorf("Want Stats, got nil")
	}
	sess.End()
}

func TestSession_End(t *testing.T) {
	sess := createNewSession()
	sess.Initialize(defaultOptions)
	sess.End()

	nilTime := time.Time{}
	if sess.Stats.FinishedAt == nilTime {
		t.Errorf("Stats field FinishAt should not be nil time")
	}
	if sess.Stats.Status != StatusSuccess {
		t.Errorf("Want %v, got %v", StatusSuccess, sess.Stats.Status)
	}
}

func TestSession_InitLogger(t *testing.T) {
	sess := createNewSession()
	sess.Initialize(defaultOptions)
	if sess.Out == nil {
		t.Errorf("Want Logger, got nil")
	}
	sess.End()
}

func TestSession_InitStats(t *testing.T) {
	sess := createNewSession()
	sess.Initialize(defaultOptions)
	if sess.Stats == nil {
		t.Errorf("Want Stats, got nil")
	}
	sess.End()
}

func TestSession_AddFinding(t *testing.T) {
	sess := createNewSession()
	sess.Initialize(defaultOptions)
	sess.AddFinding(&findings.Finding{})
	if len(sess.Findings) != 1 {
		t.Errorf("Want 1, got %v", len(sess.Findings))
	}
	sess.End()
}

func TestSession_AddRepository(t *testing.T) {
	sess := createNewSession()
	sess.Initialize(defaultOptions)
	sess.AddRepository(&gitprovider.Repository{})
	if len(sess.Repositories) != 1 {
		t.Errorf("Want 1, got %v", len(sess.Repositories))
	}
	sess.End()
}

func createNewSession() *Session {
	return &Session{
		Mutex:        sync.Mutex{},
		Options:      options.Options{},
		Out:          nil,
		Stats:        nil,
		Findings:     nil,
		Repositories: nil,
		Signatures:   nil,
	}
}
