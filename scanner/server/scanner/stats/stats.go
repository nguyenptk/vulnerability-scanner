/*
 * Copyright 2019 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
 * Use of this source code is governed by an MIT-style license that can be found in the LICENSE file
 */

package stats

import (
	"sync"
	"time"

	"github.com/nguyenptk/vulnerability-scanner/scanner/common/log"
)

// Stats holds info about the scan status
// Can push it to third-party for monitoring such as Datadog
type Stats struct {
	sync.Mutex

	QueueAt      time.Time `json:"queue_at,omitempty"`
	StartedAt    time.Time `json:"started_at,omitempty"`
	FinishedAt   time.Time `json:"finished_at,omitempty"`
	Status       string    `json:"status,omitempty"`
	Progress     float32   `json:"progress,omitempty"`
	Targets      int       `json:"targets,omitempty"`
	Repositories int       `json:"repositories,omitempty"`
	Findings     int       `json:"findings,omitempty"`
}

// IncrementTargets increase the target count by 1
func (s *Stats) IncrementTargets() {
	s.Lock()
	defer s.Unlock()
	s.Targets++
}

// IncrementRepositories increase the repo count by 1
func (s *Stats) IncrementRepositories() {
	s.Lock()
	defer s.Unlock()
	s.Repositories++
}

// IncrementFindings increase finding count by 1
func (s *Stats) IncrementFindings() {
	s.Lock()
	defer s.Unlock()
	s.Findings++
}

// UpdateProgress updates the progress percentage
func (s *Stats) UpdateProgress(current int, total int) {
	s.Lock()
	defer s.Unlock()
	if current >= total {
		s.Progress = 100.0
	} else {
		s.Progress = (float32(current) * float32(100)) / float32(total)
	}
}

// PrintStats prints the stat info
func (s *Stats) PrintStats(logger *log.Logger) {
	logger.Info("\nFindings....: %d\n", s.Findings)
	logger.Info("Repositories: %d\n", s.Repositories)
	logger.Info("Targets.....: %d\n\n", s.Targets)
}
