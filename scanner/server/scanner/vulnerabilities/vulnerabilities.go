package vulnerabilities

import (
	"crypto/sha256"
	"fmt"
	"io"
	"sync"
	"time"
)

// IntPointer deals with 0 when unmarshal json
func IntPointer(v int) *int {
	return &v
}

// IntPointer deals with 0.0 when unmarshal json
func FloatPointer(v float32) *float32 {
	return &v
}

// Result holds the info for the response to client
type Result struct {
	ID              string           `json:"id,omitempty"`
	QueueAt         time.Time        `json:"queue_at,omitempty"`
	StartedAt       time.Time        `json:"started_at,omitempty"`
	FinishedAt      time.Time        `json:"finished_at,omitempty"`
	Status          string           `json:"status,omitempty"`
	Progress        *float32         `json:"progress,omitempty"`
	Targets         *int             `json:"targets,omitempty"`
	Repositories    *int             `json:"repositories,omitempty"`
	Findings        *int             `json:"findings,omitempty"`
	Vulnerabilities []*Vulnerability `json:"vulnerabilities,omitempty"`
}

// Vulnerability holds the info for a scan finding per repository
type Vulnerability struct {
	sync.Mutex

	ID             string     `json:"id,omitempty"`
	ReportID       string     `json:"report_id,omitempty"`
	RepositoryName string     `json:"repository_name,omitempty"`
	RepositoryUrl  string     `json:"repository_url,omitempty"`
	Findings       []*Finding `json:"findings,omitempty"`
}

// Finding holds the info for scan findings per vulnerability
type Finding struct {
	ID              string `json:"id,omitempty"`
	VulnerabilityID string `json:"vulnerability_id,omitempty"`
	FilePath        string `json:"file_path,omitempty"`
	Action          string `json:"action,omitempty"`
	Description     string `json:"description,omitempty"`
	Comment         string `json:"comment,omitempty"`
	FileURL         string `json:"file_url,omitempty"`
	Line            uint64 `json:"line,omitempty"`
}

// AddFinding adds a finding to Vulnerability
func (v *Vulnerability) AddFinding(finding *Finding) {
	v.Lock()
	defer v.Unlock()
	v.Findings = append(v.Findings, finding)
}

// GenerateHashID generates an unique hash for Vulnerability
func (v *Vulnerability) GenerateHashID() (hash string, err error) {
	h := sha256.New()
	str := fmt.Sprintf("%s%s%d", v.RepositoryName, v.RepositoryUrl, time.Now().Unix())

	_, err = io.WriteString(h, str)
	if err != nil {
		return "", err
	}

	return fmt.Sprintf("%x", h.Sum(nil)), nil
}

// GenerateHashID generates an unique hash for Finding
func (f *Finding) GenerateHashID() (hash string, err error) {
	// Used for dedupe in defect dojo
	h := sha256.New()
	str := fmt.Sprintf("%s%s%v%d", f.FileURL, f.Action, f.Line, time.Now().Unix())

	_, err = io.WriteString(h, str)
	if err != nil {
		return "", err
	}

	return fmt.Sprintf("%x", h.Sum(nil)), nil
}
