package vulnerabilities

import (
	"crypto/sha256"
	"fmt"
	"io"
	"sync"
)

// Vulnerability holds the info for a scan finding per repo
type Vulnerability struct {
	sync.Mutex

	ID             string     `json:"id,omitempty"`
	RepositoryName string     `json:"repository_name,omitempty"`
	RepositoryUrl  string     `json:"repository_url,omitempty"`
	Findings       []*Finding `json:"findings,omitempty"`
}

// Finding holds the info for scan findings per vulnerability
type Finding struct {
	FilePath    string `json:"file_path,omitempty"`
	Action      string `json:"action,omitempty"`
	Description string `json:"description,omitempty"`
	Comment     string `json:"comment,omitempty"`
	FileURL     string `json:"file_url,omitempty"`
	Line        uint64 `json:"line,omitempty"`
}

// AddFinding adds a finding
func (v *Vulnerability) AddFinding(finding *Finding) {
	v.Lock()
	defer v.Unlock()
	v.Findings = append(v.Findings, finding)
}

// GenerateHashID generates an unique hash
func (v *Vulnerability) GenerateHashID() (hash string, err error) {
	h := sha256.New()
	str := fmt.Sprintf("%s%s", v.RepositoryName, v.RepositoryUrl)

	_, err = io.WriteString(h, str)
	if err != nil {
		return "", err
	}

	return fmt.Sprintf("%x", h.Sum(nil)), nil
}
