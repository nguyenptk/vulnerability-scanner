package storages

import (
	"time"

	"github.com/nguyenptk/vulnerability-scanner/scanner/server/scanner/vulnerabilities"
	"github.com/nguyenptk/vulnerability-scanner/scanner/storages/mysql"
)

// FindingStorage
type FindingStorage struct {
	Findings []*Finding
}

// Finding holds the info for Findings table
type Finding struct {
	ID              string    `json:"id,omitempty"`
	VulnerabilityID string    `json:"vulnerability_id,omitempty"`
	FilePath        string    `json:"file_path,omitempty"`
	Action          string    `json:"action,omitempty"`
	Description     string    `json:"description,omitempty"`
	Comment         string    `json:"comment,omitempty"`
	FileURL         string    `json:"file_url,omitempty"`
	Line            uint64    `json:"line,omitempty"`
	CreatedAt       time.Time `json:"created_at,omitempty"`
	UpdatedAt       time.Time `json:"updated_at,omitempty"`
}

// Insert multi Findings to Findings table
func (f *FindingStorage) Insert(db *mysql.Database, result *vulnerabilities.Result) {
	f.ConvertResultToFinding(result)
	if f.Findings != nil {
		db.DB.Create(f.Findings)
	}
}

// ConvertResultToFinding holds the Findings object in FindingStorage
func (f *FindingStorage) ConvertResultToFinding(result *vulnerabilities.Result) {
	// Loop Vulnerabilities in Report
	for _, v := range result.Vulnerabilities {
		// Loop Findings in Vulnerabilities
		for _, v := range v.Findings {
			Finding := &Finding{
				ID:              v.ID,
				VulnerabilityID: v.VulnerabilityID,
				FilePath:        v.FilePath,
				Action:          v.Action,
				Description:     v.Description,
				Comment:         v.Comment,
				FileURL:         v.FileURL,
				Line:            *v.Line,
			}
			f.Findings = append(f.Findings, Finding)
		}
	}
}
