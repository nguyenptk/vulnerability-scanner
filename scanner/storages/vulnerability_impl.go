package storages

import (
	"time"

	"github.com/nguyenptk/vulnerability-scanner/scanner/server/scanner/vulnerabilities"
	"github.com/nguyenptk/vulnerability-scanner/scanner/storages/mysql"
)

// VulnerabilityStorage
type VulnerabilityStorage struct {
	Vulnerabilities []*Vulnerability
}

// Vulnerability holds the info for Vulnerabilities table
type Vulnerability struct {
	ID             string    `json:"id,omitempty"`
	ReportID       string    `json:"report_id,omitempty"`
	RepositoryName string    `json:"repository_name,omitempty"`
	RepositoryUrl  string    `json:"repository_url,omitempty"`
	CreatedAt      time.Time `json:"created_at,omitempty"`
	UpdatedAt      time.Time `json:"updated_at,omitempty"`
}

// Insert multi Vulnerabilities to Vulnerabilities table
func (f *VulnerabilityStorage) Insert(db *mysql.Database, result *vulnerabilities.Result) {
	f.ConvertResultToVulnerability(result)
	if f.Vulnerabilities != nil {
		db.DB.Create(f.Vulnerabilities)
	}
}

// ConvertResultToVulnerability holds the Vulnerability object in VulnerabilityStorage
func (f *VulnerabilityStorage) ConvertResultToVulnerability(result *vulnerabilities.Result) {
	for _, v := range result.Vulnerabilities {
		vulnerability := &Vulnerability{
			ID:             v.ID,
			ReportID:       v.ReportID,
			RepositoryName: v.RepositoryName,
			RepositoryUrl:  v.RepositoryUrl,
		}
		f.Vulnerabilities = append(f.Vulnerabilities, vulnerability)
	}
}
